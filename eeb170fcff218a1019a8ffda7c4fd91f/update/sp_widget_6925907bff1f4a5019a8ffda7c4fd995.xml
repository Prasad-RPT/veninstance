<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $rootScope) {

	/* widget controller */

	var c = this;

	$scope.goBack = function() {
		window.history.back();
	};

	$scope.form_title = $scope.options.form_title;
	$scope.button_text = $scope.options.button_text;

	var toStore = [];
	$scope.spanText = '';

	$scope.menuItems = $scope.data.table;

	$scope.validateForm = function() {
		var invalidQuestions = []; // Array to store invalid questions
		var isFormValid = true; // Flag to track overall form validity

		// Function to validate a single question and its sub-questions recursively
		var validateQuestion = function(question) {
			var isValid = true; // Flag to track question validity

			// Reset error span for the current question
			question.span = '';

			// Validate boolean type questions
			if (question.field2 === 'Boolean') {
				if (!(question.answer || question.no)) {
					question.span = 'Please select Yes or No';
					isValid = false;
				}
			}

			// Validate other types of questions
			if (question.field2 !== 'Boolean') {
				if (question.field2 === 'Date') {
					if (!question.dateValue) {
						question.span = 'Please enter a date';
						isValid = false;

					}
				}
				if (question.field2 === 'Email' && !question.value) {
                    if (!isValidEmail(question.value)) {
                        question.span = 'Please enter a valid email';
                        isValid = false;
                    }
                }
				if (question.field2 === "String" && !question.value) {
					question.span = 'Please enter a valid answer';
					isValid = false;
				}
				if (question.field2 === "NUMBER" && !question.num) {
					question.span = 'Please enter a number';
					isValid = false;
				}
				if ((question.field2 === "Dropdown" || question.field2 === "Options") && !question.selectedOption) {

					question.span = 'Please select an option';
					isValid = false;

				}
			}

			// Recursively validate sub-questions if parent question is answered "Yes"
			if (question.answer && question.subQ && question.subQ.length > 0) {
				question.subQ.forEach(function(subQuestion) {
					if (!validateQuestion(subQuestion)) {
						isValid = false; // If any sub-question is invalid, mark this question as invalid
					}
				});
			}

			// If the question is invalid, add it to the invalidQuestions array
			if (!isValid) {
				invalidQuestions.push(question.field1);
			}

			return isValid; // Return the validity of this question
		};

		// Validate each question in the menuItems array
		$scope.menuItems.forEach(function(item) {
			if (!validateQuestion(item)) {
				isFormValid = false; // If any question is invalid, mark the entire form as invalid
			}
		});

		// Display alert message with invalid questions, if any
		if (invalidQuestions.length > 0) {
			var message = 'The following questions are not validated:\n' + invalidQuestions.join('\n');
			alert(message);
		}

		return isFormValid; // Return the overall form validity
	};

	// Function to validate email format
	var isValidEmail = function(email) {
		var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
		return emailRegex.test(email);
	};


	$scope.dataSubmit = function() {
		console.log("Submitting form");
		if ($scope.validateForm()) {
			console.log("Form validation passed");
			c.server.get({ action: "create", value: toStore}).then(function(res) {
				console.log("Form submitted successfully");
				window.location.href = '/smart_assurance?id=nominee';
			});
		} else {
			console.log("Form validation failed");
			alert("Please fill in all required fields.");
		}
	};

	$scope.$on('getDetails', function(event, myVariableValue) {
		var id = myVariableValue.sys_id;
		for (var i = 0; i < toStore.length; i++) {
			if (toStore[i].sys_id == id) {
				toStore[i].value = myVariableValue.value;
				toStore[i].res = myVariableValue.res;
				return;
			}
		}
		toStore.push(myVariableValue);
	});

}
]]></client_script>
        <controller_as>c</controller_as>
        <css>*{&#13;
  font-family: Helvetica;&#13;
}&#13;
.formBox{&#13;
  display:flex;&#13;
  justify-content:center;&#13;
  align-items:center;&#13;
}&#13;
&#13;
#backBtn{&#13;
  margin:0;&#13;
  //margin-right:auto;&#13;
  background-color:#5A7F71;&#13;
  width:80px;&#13;
}&#13;
&#13;
i{&#13;
  font-size:18px;&#13;
}&#13;
/*&#13;
.options-container{&#13;
  display:flex;&#13;
  justify-content:center;&#13;
  align-items:center;&#13;
}&#13;
*/&#13;
span{&#13;
 &#13;
  font-size:12px;&#13;
}&#13;
  &#13;
.pageHead {&#13;
  font-size: 24px;&#13;
  line-height: 1.5;&#13;
  color:  #5A7F71;&#13;
&#13;
  font-weight:600;&#13;
}&#13;
.line2{&#13;
  color:  #5A7F71;&#13;
  font-size: 16px;&#13;
}&#13;
&#13;
&#13;
form{&#13;
  box-shadow: 0 3px 6px 0 rgba(0,0,0,.16);&#13;
  border-radius:5px;&#13;
  padding:20px;&#13;
  width:700px;&#13;
  height:100%;&#13;
  margin-left:0;&#13;
}&#13;
.menu-item{&#13;
  font-size: 16px;&#13;
  font-weight: 500;&#13;
  color: rgb(37, 56, 88);&#13;
  word-break: break-word;&#13;
  padding:5px;&#13;
}&#13;
&#13;
/*&#13;
.questionTitle{&#13;
margin-bottom:10px;&#13;
}&#13;
*/&#13;
&#13;
.styled-input {&#13;
  border: 1px solid rgb(37, 56, 88); &#13;
  padding: 8px; &#13;
  font-size: 16px; &#13;
  width: 260px;&#13;
  border-radius:5px;&#13;
  /* Adjust width as needed */&#13;
  margin-top:10px;&#13;
}&#13;
.continuebtn{&#13;
  display:flex;&#13;
  align-items:center;&#13;
  justify-content:center;&#13;
&#13;
}&#13;
&#13;
&#13;
input[type=checkbox] {&#13;
  position: absolute;&#13;
  opacity: 0;&#13;
  visibility: hidden;&#13;
}&#13;
&#13;
.answer{&#13;
  //border:2px solid green;&#13;
  background-color: white; /* Button background color */&#13;
  color: rgb(37, 56, 88); /* Button text color */&#13;
  padding: 8px 16px; /* Adjust padding as needed */&#13;
  border: 1px solid rgb(37, 56, 88); /* Button border */&#13;
  border-radius: 4px; /* Button border-radius */&#13;
  cursor: pointer;&#13;
  text-align: center;&#13;
  font-size: 16px;&#13;
  //width:200px;&#13;
  //width:auto;&#13;
width:26rem;&#13;
  margin-right:20px;&#13;
  display:flex;&#13;
  align-items:center;&#13;
  justify-content:center;&#13;
  margin-top:10px;&#13;
&#13;
}&#13;
.answer1{&#13;
  //border:2px solid green;&#13;
  background-color: white; /* Button background color */&#13;
  color: rgb(37, 56, 88); /* Button text color */&#13;
  padding: 8px 16px; /* Adjust padding as needed */&#13;
  border: 1px solid rgb(37, 56, 88); /* Button border */&#13;
  border-radius: 4px; /* Button border-radius */&#13;
  cursor: pointer;&#13;
  text-align: center;&#13;
  font-size: 16px;&#13;
  //width:200px;&#13;
  //width:auto;&#13;
  width:26rem;&#13;
&#13;
  margin-right:10px;&#13;
  display:flex;&#13;
  align-items:center;&#13;
  justify-content:center;&#13;
&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
.answer.checked {&#13;
  color: white; /* Change text color for better visibility */&#13;
  //background-color:  #5A7F71;&#13;
  background-color: #5A7F71;&#13;
  border:1px solid #5A7F71;&#13;
}&#13;
&#13;
.answer1.checked {&#13;
  //background-color: lighten('redColor', 25%); /* Change background color when checkbox is checked */&#13;
  color: white; /* Change text color for better visibility */&#13;
  // background-color:  #5A7F71;&#13;
  background-color: #5A7F71;&#13;
  border:1px solid #5A7F71;&#13;
}&#13;
&#13;
button {&#13;
  background-color: #5A7F71; &#13;
  border: none;&#13;
  color: white;&#13;
  padding: 10px 20px;&#13;
  text-align: center;&#13;
  text-decoration: none;&#13;
  display: inline-block;&#13;
  font-size: 16px;&#13;
  margin: 4px 2px;&#13;
  cursor: pointer;&#13;
  border-radius: 8px;&#13;
  margin-left:auto;&#13;
}&#13;
</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,field_list,filter</field_list>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Copy of Question Form Template </name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	data.table = [];
	//data.table = $sp.getValue('table');

	data.Qtable = data.table || $sp.getValue('table');
	var filter = data.filter || $sp.getValue('filter');
	data.title=$sp.getValue("title");

	var optA = [];
	var sys ='';

	var gr= new GlideRecord('x_rptp_smartinte_0_integration_question_configuration');
	//var gr= new GlideRecord(table);

	//gr.addQuery('active',true);
	//gs.addInfoMessage(gr);
	//var gr= new GlideRecord(data.table);		
	if(filter){
		gr.addEncodedQuery(filter);
	}
 //gr.addEncodedQuery('question_category=01a8c935ff178a1019a8ffda7c4fd974');
	gr.addQuery('question_category','01a8c935ff178a1019a8ffda7c4fd974');
	gr.orderBy('order');
	//gr.groupBy('question_category');
	gr.query(); // Query all records from the table

	// Iterate over the GlideRecord result
	while (gr.next()) {
		// Extract fields from the GlideRecord
		var fieldValue1 = gr.getDisplayValue('question'); // Replace 'field1' with the actual field name
		var fieldValue2 = gr.getDisplayValue('question_responsetypeid'); // Replace 'field2' with the actual field name
		var hasSubQuestions = gr.getValue('has_sub_questions') || false;
		var option=[];
		var ques_category=gr.getDisplayValue('question_category');
		

		//var category=gr.getValue('insurance_category');
		var subQuestions = []; 
		var isSubQuestion = false;
		if(hasSubQuestions) {
			var questionSys_Id = gr.getValue('sys_id');
			isSubQuestion = !gs.nil(questionSys_Id);
			if(isSubQuestion) {
				subQuestions = getRecords(questionSys_Id);
			}



			// Create an object for the question
			var obj = {
				field1: fieldValue1,
				field2: fieldValue2,
				sys_id: gr.getValue('sys_id'),
				res:gr.getValue('question_responsetypeid'),
				question_category:ques_category,
				value:"",
				span:''
			};

			
			

			// If it's a subquestion, add subquestions to the object
			if(isSubQuestion) {
				obj.subQ = subQuestions;
			}

			var parentQuestionId = gr.getValue('parent_question');
			if(gs.nil(parentQuestionId)) {
				// Push the object into the array
				data.table.push(obj);
			}
			//	gs.addErrorMessage(fieldValue2)
			if (fieldValue2 === "Dropdown" || fieldValue2 === "Options"){
				option=optionValue(questionSys_Id)
				obj.option=option
			}
		}
		//	gs.addInfoMessage(JSON.stringify(data.table))
		//gs.addInfoMessage(JSON.stringify(obj));

	}
	function optionValue(sys){
		var opt=[]

		var optGr = new GlideRecord("x_rptp_smartinte_0_integration_question_response_options" );
		optGr.addQuery("question",sys);
		optGr.query();
		while (optGr.next()) {
			opt.push({ label: optGr.options + "", value: optGr.options + "" });
		//	gs.addErrorMessage(JSON.stringify(opt))
		}
		return opt;
	}


	//filtering categories	

	function getRecords(sysId) {
		var gr2= new GlideRecord('x_rptp_smartinte_0_integration_question_configuration');
		//var gr2= new GlideRecord(data.table);	
		gr2.addQuery('parent_question', sysId);

		gr2.query();
		var parentobj = [];

		while(gr2.next()){
			var sbQue = gr2.getDisplayValue('question');
			var sbQuesRes = gr2.getDisplayValue('question_responsetypeid');
			
			var hasSubQuestions = gr.getValue('has_sub_questions') || false;
			var subQuestions = []; 
			var isSubQuestion = false;
			if(hasSubQuestions) {
				var questionSys_Id = gr2.getValue('sys_id');
				isSubQuestion = !gs.nil(questionSys_Id);
				if(isSubQuestion) {
					subQuestions = getRecords(questionSys_Id);
				}
			}
			
			

			obj = {
				field1: sbQue,
				field2: sbQuesRes,
				sys_id: gr2.getValue('sys_id'),
				res:gr2.getValue('question_responsetypeid'),
				span:"",
				//subQ:optA
				

			}
			
			
			


			if (isSubQuestion) {
				obj.subQ = subQuestions;
			}
				if (sbQuesRes === "Dropdown" || sbQuesRes === "Options") {
					var questionSys_Id1 = gr2.getValue('sys_id');
				option=optionValue(questionSys_Id1)
				obj.option=option
			}

			parentobj.push(obj);
		}
//gs.addInfoMessage(JSON.stringify(obj));
		return parentobj;

	}

	if(input&&input.action==="create"){
		//gs.addInfoMessage(JSON.stringify(input.value));
	
		var store=new GlideRecord('x_rptp_smartinte_0_integration_question_response');
		for(var i=0;i<input.value.length;i++){


			var qGr=new GlideRecord('x_rptp_smartinte_0_integration_question_configuration');
			qGr.addQuery('sys_id',input.value[i].sys_id+"");
			qGr.query();
			var ins="";
			var prVar="";
			var pr="";
			
			if(qGr.next()){
				prVar=qGr.product_variant;
				ins=qGr.insurer;
				pr=qGr.product;

			}
			store.initialize();
		
			//store.setValue('name',input.value[i].name+"");
			store.setValue('insurer',ins);

			store.setValue('product',pr);

			store.setValue('product_variant',prVar);
     
			store.setValue('question',input.value[i].sys_id+"");
			store.setValue('response',input.value[i].value);
			store.setValue('question_response_type',input.value[i].field+"");
			store.insert();
		}

	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harshitha</sys_created_by>
        <sys_created_on>2024-07-16 11:01:21</sys_created_on>
        <sys_id>6925907bff1f4a5019a8ffda7c4fd995</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_name>Copy of Question Form Template </sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sp_widget_6925907bff1f4a5019a8ffda7c4fd995</sys_update_name>
        <sys_updated_by>harshitha</sys_updated_by>
        <sys_updated_on>2024-07-23 12:23:10</sys_updated_on>
        <template><![CDATA[<div>
 
  <div ng-app="MyApp" ng-controller="MyCtrl"  class="container">

    <div class="formBox"> 
      <form class="section-1" name="myForm">
        <div class="backk">
          <button  id="backBtn" class="btn btn-primary goBack" ng-click="goBack()">
            <i class="fa fa-arrow-circle-left"></i>
          </button>
        </div>
        <div clss="textContent">
          <h4 class="pageHead">
            {{form_title}}
          </h4> 
          <p class="line2">
Please answer the below questions          </p>
          <hr>


        </div>
        <div class="formQuestions">
          <healthh menu="menuItems"></healthh>
        </div>

        <hr>
        <div class="continuebtn">
          <button type="submit" ng-click="dataSubmit()" value="submit">
            <!--  Continue to nominee section-->{{button_text}} Continue
          </button>
          <!-- <widget id="custom_button"></widget>-->
        </div>
      
 ]]></template>
    </sp_widget>
</record_update>
