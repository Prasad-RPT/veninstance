<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>Save Proposal API</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	
var header1=request.headers['x-frame-options']||"";
var header2=request.headers['content-security-policy']||"";


// check for headers security purpose
if(header1=="" ||  new x_rptp_smartinte_0.checkForHeaders().checkHeaders("1",header1)+""=="0"){
	response.setContentType("application/json");
			response.setStatus(400);
            var inValidUser={
				code:400,
				message:"Missing or invalid X-Frame-Options in header"
			}
            var writer = response.getStreamWriter();
            writer.writeString(JSON.stringify(inValidUser));
			return;
}
if(header2=="" || new x_rptp_smartinte_0.checkForHeaders().checkHeaders("2",header2)+"" =="0"){
	response.setContentType("application/json");
			response.setStatus(400);
            var inValidUser={
				code:400,
				message:"Missing or invalid Content-Security-Policy in header"
			}
            var writer = response.getStreamWriter();
            writer.writeString(JSON.stringify(inValidUser));
			return;
}



//for saveProposal
var logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    var sysID = logGR.insert();

	//for quoteRecor

var insurer="";
var req=request.body.data;
//var productType=req.data.productSelection.productType;
try {
		var inputs = {};
		inputs['txnid'] = req.enquiryId||req.transactionId; // String 
		inputs['producttype'] = "ULIP" ; // String 
		inputs['requestbody'] = req; // String 
		inputs['sysid'] = sysID+""; // String

var reqLogGr=new GlideRecord('x_rptp_smartinte_0_integration_request_log');
reqLogGr.addQuery("request_id",req.transactionId);
reqLogGr.addQuery("requesttype","quote");
if(reqLogGr.next()){
	insurer=reqLogGr.insurer+"";
}



logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    logGR.addQuery('sys_id', sysID);
    logGR.query();
    if (logGR.next()) {
		logGR.request_id=req.transactionId;
        logGR.requesttype = "Save_Proposal";
        logGR.clientrequestbody = JSON.stringify(req);
        logGR.insurer = insurer;
        logGR.update();
    }

		// Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
		// sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.save_proposal_final').inBackground().withInputs(inputs).run();
				
		// Execute Synchronously: Run in foreground. Code snippet has access to outputs.
		var result = sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.save_proposal_final').inForeground().withInputs(inputs).timeout(900000).run();
		var outputs = result.getOutputs();

		// Get Outputs:
		// Note: outputs can only be retrieved when executing synchronously.
		var res = outputs['response']; // Object
	// 	var receivedres = outputs['receivedres']; // String
	// 	var formatted_req = outputs['formatted_req']; // String
	// 	var clientreq = outputs['clientreq']; // String	
	// 	var quoteinsurerresponse = outputs['quoteinsurerresponse']; // String
	// 	var quoteinsurerreq = outputs['quoteinsurerreq']; 
	// //	var insurer = outputs['insurer']; // String
	// //	gs.info("RES"+res);
	// 	 	var id;
    //         logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    //         logGR.addQuery('sys_id', sysID);
    //         logGR.query();
    //         if (logGR.next()) {
	// 			id = logGR.request_id;
	// 			if(receivedres.pInVar1_inout)
    //             logGR.receviedresponse = receivedres;
	// 			else
	// 			  logGR.receviedresponse = (receivedres);
    //             logGR.transformedrequest = (formatted_req);

    //                 logGR.responsereturened = res;

    //             logGR.clientrequestbody = JSON.stringify(clientreq);
    //             logGR.update();
		
	// 		}
	//gs.info("hi");


//save quote for app sub
	// var quoteRec = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    // quoteSysId=quoteRec.insert();

	// quoteRec = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    //         quoteRec.addQuery('sys_id', quoteSysId);
	// 		quoteRec.query();
	// 		if(quoteRec.next()){
	// 			quoteRec.requesttype = "Quote App Sub";
	// 			quoteRec.receviedresponse = (quoteinsurerresponse);
    //             quoteRec.transformedrequest = (quoteinsurerreq);
	// 			quoteRec.insurer=insurer;
	// 			quoteRec.update();
	// 		}
	

			if(typeof res != 'object'){
				res=JSON.parse(res);
			}
		//	gs.info("after res"+res);
			if(typeof res != 'object'){
				res=JSON.parse(res);
			}
			//gs.info("code"+res.code);
		
			if(res.code=="1"){
				res.code=="400";
				//gs.info(res.code+"after");
			}

			//gs.info(JSON.stringify(res)+"struiinf");
			response.setStatus(res.code);
			// var key = "code";
            // delete res[key];
			response.setContentType('application/json');
			//response.setBody(JSON.parse(res));
			//response 
			var writer = response.getStreamWriter();
			if(typeof res === 'object')
			res=JSON.stringify(res);
			if(typeof res === 'object')
			res=JSON.stringify(res);
		//	gs.info((res)+"struiinf");
            writer.writeString(res);
		// if(res.code){
		// 	if(res.code=="1"){
		// 		// response.setStatus(400);
		// 		// res.code=400;
		// 	}
		// 	else{
		// 		response.setStatus(res.code);
		// 	}
		// }
		// else{
		// 	res=JSON.parse(res);
		// 	if(res.responseBody && res.responseBody.status == "failure") {
		// 	response.setStatus(400);
		// 	}
		// }
		// response.setContentType("application/json");
		// response.setBody((res));
	} catch (ex) {
		
	//	gs.error(message);
		response.setBody(ex);
	}
})(request, response);
]]></operation_script>
        <operation_uri>/api</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>chandan.parmar</sys_created_by>
        <sys_created_on>2024-06-11 09:58:02</sys_created_on>
        <sys_id>54e23790ff7e861019a8ffda7c4fd9e9</sys_id>
        <sys_mod_count>85</sys_mod_count>
        <sys_name>Save Proposal API</sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sys_ws_operation_54e23790ff7e861019a8ffda7c4fd9e9</sys_update_name>
        <sys_updated_by>harshitha</sys_updated_by>
        <sys_updated_on>2024-12-19 06:08:10</sys_updated_on>
        <web_service_definition display_value="">ac72fb10ff7e861019a8ffda7c4fd9d7</web_service_definition>
        <web_service_version display_value="">68839d53fff20a1019a8ffda7c4fd9d5</web_service_version>
    </sys_ws_operation>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>54e23790ff7e861019a8ffda7c4fd9e9</id>
        <sys_created_by>akshay</sys_created_by>
        <sys_created_on>2024-09-30 17:21:04</sys_created_on>
        <sys_id>b4e4095047c1da50e9ddbf66706d4373</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>akshay</sys_updated_by>
        <sys_updated_on>2024-09-30 17:21:04</sys_updated_on>
        <table>sys_ws_operation</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
