<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="INSERT_OR_UPDATE">
        <active>false</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category/>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "";
	// your code here
	return description;
}
 generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Check PT and PPT values are valid or not.<br />Input PT Values and PPT Values.<br />Expected values - PT - True, and PPT - True.</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Check PT and PPT Values for ICICI Qutote</name>
        <order>100</order>
        <outputs/>
        <performance_include>false</performance_include>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[// The inputs are a map of the variables defined in the inputs related list below.
// Inputs are consumed in the step configuration. Input
// values may be hardcoded or mapped from the outputs of a previous step.
// If a test author using your step uses mapping to pass in an output from a previous 
// test step then when referencing the input variable the mapping will be resolved 
// automatically
//  Example:
//      var myRecords = new GlideRecord(inputs.table);
//
// The outputs are a map of the variables defined in the outputs related list.
// Outputs should be set (assigned) in order to pass data out of a test step that
// can be consumed my mapping as an input to subsequent steps. 
//  Example:
//      outputs.table = gr.getRecordClassName()
//
//
// Note that inputs and outputs are strongly typed as defined in their variable definition.
// Their behavior is the same as a dictionary defined field of the same type in a table.
//
// The stepResult is a simple API for controlling the step pass/fail and logging with three
// methods:
//      stepResult.setFailed: Causes step to fail
//
//      stepResult.setSuccess: Causes step to succeed
//
//      stepResult.setOutputMessage: Log a message to step results after step executes.
//            Can only be called once or will overwrite previous 
//            message
//
// If neither setFailed or setSuccess is called the default is to succeed.
//
// Example usage of step timeout in script
//      var counter = 0;
//      // 'timeout' is a field on the step form
//      while (counter <= timeout) {
//            if (desiredOutcome) {
//                stepResult.setOutputMessage('Success!');
//                stepResult.setSuccess();
//                return;
//            }
//            counter++;
//
//            // When writing scripts in ATF, use waitOneSecond() instead of gs.sleep()
//            // since gs.sleep() may not work in non-global scopes
//            sn_atf.AutomatedTestingFramework.waitOneSecond();
//      }
//
//      // desired outcome did not occur within the timeout
//      stepResult.setOutputMessage('Failure!');
//      stepResult.setFailed();
//
//  (function executeStep(inputs, outputs, stepResult, timeout) {

	// var gr = new GlideRecord("sys_atf_test_results");
// 	 var ppt = parseInt(inputs.PPT, 10); 
//     var pt = parseInt(inputs.PT, 10); 

    
//     var isValidPPT = false;
//     var isValidPT = false;
//     var isValidRow = false;
//     var reason = '';

//     if (ppt >= 5 && ppt <= 25) {
//         isValidPPT = true;
//     } else {
//         reason += 'PPT value is invalid; ';
//     }

//     if (pt >= 10 && pt <= 30) {
//         isValidPT = true;
//     } else {
//         reason += 'PT value is invalid; ';
//     }

//     if (isValidPPT && isValidPT) {
//         isValidRow = true;
//     }


//     gs.info('PPT: ' + ppt + ', Is Valid: ' + isValidPPT);
//     gs.info('PT: ' + pt + ', Is Valid: ' + isValidPT);
//     gs.info('Overall Validation Passed: ' + isValidRow);

    
//     outputs.Is_Valid_PPT = isValidPPT;
//     outputs.PPT_Value = ppt;
//     outputs.Is_Valid_PT = isValidPT;
//     outputs.PT_Value = pt;
//     outputs.Is_Valid_Row = isValidRow;
//     outputs.Reason = reason.trim();

    
//     if (isValidRow) {
//         stepResult.true//setSuccess();
//     } else {
//         stepResult.false//setFailure();
//     }
	
//  }(inputs, outputs, stepResult, timeout));




]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>jabbar.nurbash</sys_created_by>
        <sys_created_on>2024-07-16 10:05:17</sys_created_on>
        <sys_id>407680ff471b8210e9ddbf66706d43f7</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>Check PT and PPT Values for ICICI Qutote</sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sys_atf_step_config_407680ff471b8210e9ddbf66706d43f7</sys_update_name>
        <sys_updated_by>jabbar.nurbash</sys_updated_by>
        <sys_updated_on>2024-07-19 11:29:52</sys_updated_on>
        <template_reminder>Quote PT and PPT</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">918cb9cd47a13110237dd902516d4338</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="delete_multiple" query="documentkey=407680ff471b8210e9ddbf66706d43f7"/>
    <sys_variable_value action="delete_multiple" query="document_key=407680ff471b8210e9ddbf66706d43f7"/>
    <sys_element_mapping action="delete_multiple" query="table=var__m_atf_input_variable_407680ff471b8210e9ddbf66706d43f7^id=407680ff471b8210e9ddbf66706d43f7"/>
    <sys_element_mapping action="delete_multiple" query="table=var__m_atf_output_variable_407680ff471b8210e9ddbf66706d43f7^id=407680ff471b8210e9ddbf66706d43f7"/>
</record_update>
