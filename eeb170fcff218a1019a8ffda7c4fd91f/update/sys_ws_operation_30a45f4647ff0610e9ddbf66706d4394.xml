<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_rptp_smartinte_0/get_quote/testquote</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>testing</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    var logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    var sysID = logGR.insert();

    var res;
    var inputs;
    var message;
    var outputs;
    var result;
    var req = request.body.data;
    var insurer = req.productId || "all";

    var productID = req.productId;
    var variant = req.variantId;
    var iGr = new GlideRecord('x_rptp_smartinte_0_integrationproductvariants');
    iGr.addQuery('product_guid_id', productID);
    iGr.query();
    if (iGr.next()) {
        var iGR = new GlideRecord('x_rptp_smartinte_0_integrationinsurer');
        iGR.addQuery('sys_id', iGr.insurer);
        iGR.query();
        if (iGR.next()) {
            insurer = iGR.code;
        }
    }




    logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    logGR.addQuery('sys_id', sysID);
    logGR.query();
    if (logGR.next()) {
        logGR.requesttype = "Quote";
        logGR.clientrequestbody = JSON.stringify(req);
        logGR.insurer = insurer;
        logGR.update();
    }

    // var checkCache = new global.storeCache().checkForCache(req);
    // //gs.info(checkCache);
    // if (!checkCache === false) {
    // 	response.setContentType('application/json');
    // 	response.setBody(JSON.parse(checkCache));
    // 	gs.info("cache");
    // 	logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
    // 	logGR.addQuery('sys_id', sysID);
    // 	logGR.query();
    // 	if (logGR.next()) {
    // 		logGR.receviedresponse = (receivedresponse);
    // 		logGR.transformedrequest = JSON.stringify(formatedrequest);
    // 		logGR.responsereturened = (res);
    // 		logGR.update();
    // 	}
    // 	return;
    // }
   

        if (req.productId && !req.variantId) {
            var filteredQuotes = [];
            if (result && result.combinedResponses) {
                for (var i = 0; i < result.combinedResponses.length; i++) {
                    if (result.combinedResponses[i].productId === req.productId) {
                        filteredQuotes.push(result.combinedResponses[i]);
					}
                }
            } else {
                
                gs.error("Error: result or combinedResponses is undefined");
            }

            // Assuming responseObj is defined elsewhere or initialized before this block
            responseObj.payload.quote = filteredQuotes;
        }
    

    // if (result.combinedResponses.length > 0) {
    //     code = 0;
    //     msg = "Success";
    // } else {
    //     code = 1;
    //     msg = "Failed";
    // }
    // var responseObj = {
    //     code: code,
    //     message: msg,
    //     payload: {
    //         enquiryId: id + "",
    //         succeed: result.scount,
    //         failed: result.fcount,
    //         quote: []
    //     }
    // };
    //     if (req.productId && !req.variantId) {
    //     var quoteObj = {};
    //     for (var i = 0; i < req.productId.length; i++) {
    //         var productId = req.productId[i];
    //         var filteredVariants = result.combinedResponses.filter(function(response) {
    //             return response.productId === productId;
    //         });
    //         quoteObj[productId] = filteredVariants;
    //     }
    //     responseObj.payload.quote = quoteObj;
    // }


    if (insurer != "all") {

        //  gs.info("normal");
        // implement resource heretry {
        try {
            inputs = {};
            //inputs['sysid'] = sysID; // String 
            inputs['producttype'] = req.categoryCode || ""; // String 
            inputs['insurer'] = insurer;
            inputs['vendorcode'] = variant; // String 
            //inputs['productname'] =""; // String 
            inputs['productid'] = productID; // String 
            inputs['variant'] = variant; // String 
            inputs['requestbody'] = req; // Object 

            // Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
            // sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.premium_sub_flow').inBackground().withInputs(inputs).run();

            // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
            result = sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.premium_sub_flow').inForeground().withInputs(inputs).timeout(50000).run();
            outputs = result.getOutputs();

            // var jsonOp = JSON.parse(outputs);
            // gs.info("Response: " + JSON.stringify(jsonOp.response));

            //var requestdetails = outputs['requestdetails']; // String
            res = outputs['response']; // String
            //	gs.info("response 123"+res);
            var receivedresponse = outputs['receivedresponse']; // String
            var formatedrequest = outputs['formatedrequest']; // String
            var tostore = outputs['tostore'];
            //  gs.info(res);
            result = JSON.parse(res);
            var id;
            logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
            logGR.addQuery('sys_id', sysID);
            logGR.query();
            if (logGR.next()) {
                id = logGR.request_id;
                logGR.receviedresponse = JSON.stringify(receivedresponse);
                logGR.transformedrequest = JSON.stringify(formatedrequest);
                if (!res.productId)
                    logGR.responsereturened = JSON.stringify(res);
                else
                    logGR.responsereturened = (res);

                logGR.clientrequestbody = JSON.stringify(tostore);
                logGR.update();

            }


            //   response.setContentType('application/json');

            //	gs.info(JSON.parse(result));
            var code;
            var msg;
            var succeedCount = 0;
            var failedCount = 0;
            if (result.status && (result.status).toLowerCase() == "success") {
                code = 0;
                msg = "Success";
                succeedCount = succeedCount + 1;
            } else {
                code = 1;
                msg = "Failed";
                failedCount = failedCount + 1;
            }
            var responseObj = {
                code: (code),
                message: msg,
                payload: {
                    enquiryId: (id) + "",
                    succeed: succeedCount,
                    failed: Math.floor(failedCount),
                    quote: []
                }
            };

            var key = "status";
            delete result[key];
            response.setContentType('application/json');
            if (code == 0) {
                response.setStatus(200);
            } else if (code == 1 && (result && result.calculations && result.calculations[0].code)) {
                if (result.calculations[0].code == 1) {
                    response.setStatus(400);
                } else {
                    response.setStatus(parseInt(result.calculations[0].code));
                }
            } else {
                response.setStatus(400);
            }

            result = JSON.stringify(result);
            responseObj.payload.quote.push(JSON.parse(result));

            var writer = response.getStreamWriter();


            writer.writeString(JSON.stringify(responseObj));
            //gs.print(responseObj)
            //new global.storeCache().setValue(req, JSON.parse(res));//set the cache value to the response 


        } catch (ex) {


            response.setContentType('application/json');
            if (outputs) {
                res = outputs['response']; // String
                if (res && (res.code || res.status)) {
                    response.setBody((res));
                } else
                    response.setBody(JSON.parse(res));
                logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
                logGR.addQuery('sys_id', sysID);
                logGR.query();
                if (logGR.next()) {
                    logGR.responsereturened = res;
                    logGR.update();
                }
            } else {
                message = ex.getMessage();

                response.setContentType('application/json');
                response.setBody(({
                    code: 400,
                    "message": message
                }));
                logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
                logGR.addQuery('sys_id', sysID);
                logGR.query();
                if (logGR.next()) {
                    logGR.responsereturened = message;
                    logGR.update();
                }
            }
        }

    } else if (insurer == "all") {

        try {
            inputs = {};
            inputs['requestbody'] = req; // JSON 
            inputs['producttype'] = req.categoryCode;

            // Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
            // sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.bulk_qoute').inBackground().withInputs(inputs).run();

            // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
            result = sn_fd.FlowAPI.getRunner().subflow('x_rptp_smartinte_0.bulk_qoute').inForeground().withInputs(inputs).timeout(1500000).run();
            outputs = result.getOutputs();

            // Get Outputs:
            // Note: outputs can only be retrieved when executing synchronously.
            //   var requestdetails = outputs['requestdetails']; // String
            res = outputs['response']; // String

            result = JSON.parse(res);
            var id;
            logGR = new GlideRecord('x_rptp_smartinte_0_integration_request_log');
            logGR.addQuery('sys_id', sysID);
            logGR.query();
            if (logGR.next()) {
                id = logGR.request_id;
            }
            var code;
            var msg;


            if (result.combinedResponses.length > 0) {
                code = 0;
                msg = "Success";
            } else {
                code = 1;
                msg = "Failed";
            }
            var responseObj = {
                code: code,
                message: msg,
                payload: {
                    enquiryId: id + "",
                    succeed: result.scount,
                    failed: result.fcount,
                    quote: []
                }
            };
            result = JSON.stringify(result);
            responseObj.payload.quote = (JSON.parse(result).combinedResponses);
            response.setContentType('application/json');
            var writer = response.getStreamWriter();
            writer.writeString(JSON.stringify(responseObj));
            //   response.setBody(responseObj);


        } catch (ex) {
            response.setContentType('application/json');
            if (outputs) {
                res = outputs['response']; // String
                response.setBody(JSON.parse(res));
            } else {
                message = ex.getMessage();
                gs.error(message);
                response.setContentType('application/json');
                response.setBody(({
                    code: 400,
                    "message": message
                }));

            }
        
		}
	}
})(request, response);]]></operation_script>
        <operation_uri>/api/x_rptp_smartinte_0/v1/get_quote/testquote</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/testquote</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>priyanka</sys_created_by>
        <sys_created_on>2024-08-05 11:02:08</sys_created_on>
        <sys_id>30a45f4647ff0610e9ddbf66706d4394</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>testing</sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sys_ws_operation_30a45f4647ff0610e9ddbf66706d4394</sys_update_name>
        <sys_updated_by>priyanka</sys_updated_by>
        <sys_updated_on>2024-08-08 09:58:59</sys_updated_on>
        <web_service_definition display_value="Get Quote">884672b7ffbdce9019a8ffda7c4fd943</web_service_definition>
        <web_service_version display_value="v1">86618d4547364210e9ddbf66706d4316</web_service_version>
    </sys_ws_operation>
</record_update>
