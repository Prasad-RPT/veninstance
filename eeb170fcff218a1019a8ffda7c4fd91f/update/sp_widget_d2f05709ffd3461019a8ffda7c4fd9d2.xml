<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$rootScope,snAttachmentHandler,$element,$timeout) {
  /* widget controller */
  var c = this;
	
	
	//	$scope.sessionDetails = JSON.parse(sessionStorage.getItem("Question"));
	if ($scope.sessionDetails) {
	//alert(JSON.stringify($scope.sessionDetails.insurer));
		alert($scope.sessionDetails);
		
		c.insurer=JSON.stringify($scope.sessionDetails.insurer);
		//c.product=JSON.stringify($scope.sessionDetails.product);
		c.prodvariant=JSON.stringify($scope.sessionDetails.var);
	c.illnessCategory=JSON.stringify($scope.sessionDetails.illnessCat);
	
		
		c.server.get({"illCat":$scope.sessionDetails.illnessCat,"prodVariant":$scope.sessionDetails.var||"","insurer":$scope.sessionDetails.insurer||""}).then(function(res){
			if(res){
			//	alert("in")
				$scope.menuItems=res.data.table;
				c.data.variant=res.data.variant;
			}
		})
		
		
	}
	
	
			$scope.url = "/sys_attachment.do?sys_id=" +"16aae10d475182501f73c46a516d4329";
	
		$scope.clickedQuestion="";

	c.data.variant=c.data.variant;
//	c.data.table=c.data.table;
	
	$scope.menuItems=c.data.table;
	c.editedisActiveSub=true;
	

	
	$scope.goBack = function() {
                location.href = "?id="+"question_form";
            };
	
	
	/*
	c.createNew=function(){
		// location.href = "?id="+"illness_configuration_question";
		location.href = "/admin?id=create_new&table=" + "x_rptp_insureme_insuranceillnessconfiguration_question" + "&sys_id=-1" + "&view=sp"
	}
	*/
	c.createNew=function(){
		// location.href = "?id="+"illness_configuration_question";
		location.href = "/integration_admin_portal?id=questionnaire_form&table=" + "x_rptp_smartinte_0_integration_question_configuration" + "&sys_id=-1" + "&view=sp"
	}
	
	
	
	
	c.getVariants=function(insurer){
		c.server.get({"insurer":JSON.parse(insurer)}).then(function(res){
			if(res){
				$scope.menuItems=res.data.table;
				c.data.variant=res.data.variant;
				c.data.product=res.data.product;
				//alert(JSON.stringify(c.data.product));
				//alert(JSON.stringify(c.data.variant));
			}
		});
		
		
		c.insurerId=JSON.parse((insurer));
		 c.illnessCategory="";
		c.prodvariant="";
	//	alert(c.insurerId);
	}
	 
	
	
	
	c.getProducts=function(product,insurer){
		//alert(JSON.stringify(product))
		c.server.get({"product":JSON.parse(product)}).then(function(res){
			if(res){
				$scope.menuItems=res.data.table;
				c.data.variant=res.data.variant;
			//alert(JSON.stringify(c.data.variant));
			}
		});
		
		
		c.insurerId=JSON.parse((insurer));
		 c.illnessCategory="";
		c.prodvariant="";
	//	alert(c.insurerId);
	}
	

	c.getprod=function(prod,insurer){
	
		c.server.get({"prodVariant":JSON.parse(prod),"insurer":JSON.parse(insurer)||""}).then(function(res){
			
			if(res){
				$scope.menuItems=res.data.table;
			}
		})
		c.illnessCategory="";
			c.prodVar=JSON.parse((prod));
	//	alert(c.prodVar)
	}
	
	
	
	
	c.getQuestions=function(illCat/*,prod*/,product,insurer){
	
		c.server.get({"illCat":JSON.parse(illCat),/*"prodVariant":JSON.parse(prod)||"",*/"product":JSON.parse(product),"insurer":JSON.parse(insurer)||""}).then(function(res){
			if(res){
				$scope.menuItems=res.data.table;
			}
		})
			c.illCat=JSON.parse((illCat));
		//alert(JSON.stringify(c.illCat));
	}
	
	
	
	
	c.data.details={}
	//
	$scope.showModal=false;
	c.isActiveSub=true;
	//alert()
	
	//get data from angular
$scope.$on('myVariableUpdated',function(event, myVariableValue) {    
// Access the variable value here
	$scope.clickedQuestion=myVariableValue;
	//alert(JSON.stringify($scope.clickedQuestion))
});

	
	//to display the question
	$scope.$on('getDetails',function(event, myVariableValue) { 
	//	alert(JSON.stringify(myVariableValue))
// Access the variable value here
	$scope.clickedQuestion=myVariableValue;
	//	alert(JSON.stringify($scope.clickedQuestion))
		
		c.server.get({"action":"getDetails",value:$scope.clickedQuestion}).then(function(res){
			c.data.details=res.data.details;
		})
	//alert(JSON.stringify($scope.clickedQuestion))
});

	//to delete
	$scope.$on('delete',function(event, myVariableValue) {    
// Access the variable value here
	$scope.clickedQuestion=myVariableValue;
		c.server.get({"action":"delete",value:$scope.clickedQuestion}).then(function(res){
			c.server.get({"illCat":c.illCat,"prodVariant":c.prodVar||"","insurer":c.insurerId||""}).then(function(res){
			if(res){
					$scope.menuItems=res.data.table;
			}
			})
		})
	//alert(JSON.stringify($scope.clickedQuestion))
});

	
	
	
	
//	c.data.records=c.data.records;
	//add sub question
	
	c.addSub=function(){
		//alert(JSON.stringify($scope.clickedQuestion))
		var obj={
			refQ:$scope.clickedQuestion,
			question:c.subQuestion+"",
			//productName:JSON.parse(product)||"",
			resType:JSON.parse(c.subResponseType)||"",
			order:c.suborder+"",
			hasSub:c.hassubquestion+"",
			active:c.isActiveSub||"",
			insurer:c.insurerId||"",
			product:c.prodVar||"",
			illCat:c.illCat||""
		}
		//alert(JSON.stringify(obj))
		c.server.get({action:"create",value:obj}).then(function(res){
			//alert("hello")
			c.server.get({"illCat":c.illCat,"prodVariant":c.prodVar||"","insurer":c.insurerId||""}).then(function(res){
			if(res){
			//	alert("in")
				$scope.menuItems=res.data.table;
				
				c.subQuestion="";
				c.subResponseType="";
				c.suborder="";
				c.isActiveSub=true;
				c.hassubquestion=false;
			}
		})
		})
		
		
		
	}
	
	
	
	
	
	
	//edit function
	c.edit=function(){
	//alert(($scope.clickedQuestion));
		var obj={
			curQ:($scope.clickedQuestion),
			question:c.editedQ  || "",
			resType:JSON.parse(c.editedResType) || "",
			order:c.editedOrder || "",
			hasSub:c.editedHasSub  || "",
			active:c.editedisActiveSub  || "",
			insurer:c.insurerId ||"",
			product:c.prodVar || "",
			illCat:c.illCat || ""
		}
	//	alert("hello")
		c.server.get({value:obj,edit:"true"}).then(function(res){
		//	alert("hello")
		
			c.server.get({"illCat":c.illCat,"prodVariant":c.prodVar||"","insurer":c.insurerId||""}).then(function(res){
			if(res){
			
				$scope.menuItems=res.data.table;
				c.editedisActiveSub  =true;
				c.editedQ="";
				c.editedOrder="";
				c.editedHasSub=false;
				c.editedResType="";
			}
		})
		})
		
		
	}
	
	
	
	
	
	
	
	
	c.import=function(){
		$('#staticBackdrop').modal('show');
	
	}
	
	c.upload=function(event){
		
		$('.light-grey').css({
			'visibility': 'visible',
		})
		var leftMargin_greenBar= 0;
		var fetchCompleted=false;
			move(leftMargin_greenBar);		
		
			function move(leftMargin_greenBar) {

			var elem = document.getElementById("myBar");   
			var width = 15;
			elem.style.width=width+"%";
			var time=30;
			var id = setInterval(frame,time);	
			function frame (){

				if(leftMargin_greenBar===85){
					leftMargin_greenBar=0
				}															//if
				if (fetchCompleted) {
					clearInterval(id);
				} 															//if
				else { 
					leftMargin_greenBar++;
					var valueOfLeftMargin=leftMargin_greenBar+'%';
					$('.green').css({
						'margin-left': valueOfLeftMargin,
					})
					// elem.style.margin-left = x; 
				}															//else		
			}																					//frame()
		}		
				c.server.get({action:"fileAtt"}).then(function(res){
			//alert(JSON.stringify(res.data.ret))
		fileUpload(res.data.ret+"");
				//alert(c.insurer)
					var obj={
						insurer:c.insurer,
						illCat:c.illnessCategory,
							prod:c.prodvariant	
					}
				//alert(c.insurer)
					
 $timeout(function() {

c.server.get({action:"add",value:res.data.ret,details:obj}).then(function(res){
	if(res){
	//alert("loading table")
		c.server.get({"illCat":c.illCat,"prodVariant":c.prodVar||"","insurer":c.insurerId||""}).then(function(res){
			if(res){
			//	alert("loading data");
				$scope.menuItems=res.data.table;
				$('#staticBackdrop').modal('hide');
				$('.light-grey').css({
					'visibility': 'hidden',
				});	
			}
		})
	}
			//	location.href = "/vfsp?id=view_questions"
			})	

  }, 5000, false)
			
		})
		
			function fileUpload(productId){
				//alert()
			var $el = $element.find('input[type=file]');
				//alert()
			$el.change();
			
				
				$scope.attachFiles = function(files) {
			if (!files.files.length)
				return;

			var file = files.files[0];

			var sna = snAttachmentHandler.create('x_rptp_smartinte_0_integrationproducts', productId);
			sna.uploadAttachment(file);
			
		}
				
				
			
		}
	}
	
	c.closeModal=function(event){
	$('#staticBackdrop').modal('hide');	
	}
	

	sessionStorage.clear();

	
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.card {
  color:white;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 15px;
  margin-bottom: 15px;
      font-size: 1.4rem;
}
.light-grey{color:#000!important;background-color:#f1f1f1!important;visibility: hidden}
.green{color:#fff!important;background-color:#4CAF50!important}

.ppp{
  color:white;
}

#backBtn{
  margin:0;
  //margin-right:auto;
  background-color:#5A7F71;
  width:100px;
}
i{
  font-size:24px;
}

.card.expanded {
    height: 200px; /* Adjust the height as needed */
    transition: height 0.3s ease; /* Add smooth transition */
}

.card {
  color:white;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 15px;
  margin-bottom: 15px;
}

.card-header {
  color:white;
  font-weight: bold;
  margin-bottom: 10px;
 // font-size:1.8rem;
}

.sub-menu {
  margin-left: 20px; /* Indent sub-menus */
}


button {
  background-color: #5A7F71;
  color: white;
  padding: 5px 10px;
  margin:10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #5A7F72;
}

button.delete-button {
  background-color:#5A7F72;
}

button.delete-button:hover {
  background-color: #5A7F72;
}
.inputs {
  margin-bottom: 20px;
}

.inputs label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
  color:white;
}

.
input[type=text], select {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

select&gt;option {
  background-color: #f5f5f5;
  color: #333;
}
input[type="text"]:focus,select:focus,input[type="textArea"]:focus {
  border-color: #5A7F71; 
  outline: none; 
}

input[type=textArea]{
  color:black;
  width: 100%;
  height:12rem;
  /*padding: 12px 20px;
  margin: 8px 0;*/
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}
input[type=file]{
  padding: 12px 0px;
  margin: 8px 0;
  display: inline-block;
  box-sizing: border-box;
}
.msg{
font-weight:700;
}
input[type=submit] {
  display:flex;
  justify-content:center;
  width: 100%;
  background-color: #5C8374;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
 
input[type=submit]:hover {
  background-color: #5A7F71;
}


form{
  width:65vw;
	border:0.5px solid grey;
  padding:1rem 2rem;
  border-radius:10px
}
.required {
  color: red;
}

/* Modal content */
.modal-content {
  color:white;
  
  background-color: #092635;
  margin: 15% auto; /* Center vertically and horizontally */
  padding: 20px;
  border: 1px solid #888;
  border-radius: 5px;
  width: 80%; /* Adjust width as needed */
}

/* Modal header */
.modal-header {
  color:white;
  padding: 10px 15px;
  border-bottom: 1px solid #ddd;
}

/* Modal title */
.modal-title {
  color:white;
  
  margin: 0;
  font-size:1.8rem;
  font-weight: bold;
}

/* Close button */
.close {
  float: right;
  font-size: 28px;
  font-weight: bold;
  line-height: 1;
  color: #000;
  opacity: 0.5;
  transition: opacity 0.3s;
}

.close:hover,
.close:focus {
  color: #000;
  opacity: 0.7;
  text-decoration: none;
}

/* Modal body */
.modal-body {
  padding: 10px 15px;
}

/* Form group */
.form-group {
  margin-bottom: 15px;
}

/* Required field indicator */
.required {
  color: red;
}
input[type="text"]{
color:black;
}

.modal-body&gt;.inputs{
color:black;
}


/* Input fields */
input[type="text"],
select,
input[type="checkbox"] {
  width: 100%;
  padding: 10px;
  margin-top: 5px;
  margin-bottom: 5px;
  border: 1px solid #ccc;
  border-radius: 3px;
  box-sizing: border-box;
  color:black;
}

/* Submit button */
input[type="submit"] {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  transition: background-color 0.3s;
}

input[type="submit"]:hover {
  background-color: #45a049;
}

/* Error message */
.error-message {
  color: red;
}


.info-label {
  display: block;
  font-weight: bold;
  margin-bottom: 10px;
  color: white; /* Label text color */
}

.info-label span {
  font-weight: normal;
  margin-left: 5px; /* Add space between label text and dynamic value */
}

.info-label::after {
 // content: ":";
  margin-right: 5px; /* Add space after colon */
}
.subCheckBox{
display:flex;
  margin-top:10px !important
    align-items: center;
}

.displayCheck{
width:auto !important;
   margin-left:8px !important;
  margin-top:8px !important;

}

.createnewproduct{
}
.goBack {
    position: relative;
    width: 100px;
    height: 40px;
}

.goBack i {
    display: inline-block;
    transition: opacity 0.3s ease-out;
}

.goBack::before {
    content: 'Go back';
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.btn-primary {
    color: #fff;
    background-color: #5A7F71;
    border-color: #357ebd;
}

.goBack:hover i {
    opacity: 0;
}

.goBack:hover::before {
    display: inline-block;
} 
.twoColumnrow{
	display:flex;
  justify-content:space-between;
  align-content:center;
  flex-wrap:wrap;

}

.column{
	width:30vw;
  display:flex;
  gap:3rem;
  align-content:center;
}

.featureName{
  font-size: 1.7rem;
  font-weight: 700;
  display: flex;
  align-content: center;
  flex-wrap: wrap;  
  width: 15rem;
}
.inputData{
width:20rem;
}

input[type=text], select {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

select&gt;option {
 // color:white;
  background-color: white;
  color: #333;
}
input[type="text"]:focus,select:focus,input[type="textArea"]:focus {
  border-color: #5A7F71; 
  outline: none; 
}

input[type=textArea]{
  width: 100%;
  height:12rem;
  /*padding: 12px 20px;
  margin: 8px 0;*/
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}
input[type=file]{
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  box-sizing: border-box;
}
.msg{
font-weight:700;
}
input[type=submit] {
  display:flex;
  justify-content:center;
  width: 40%;
  background-color: #5A7F71;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
 
input[type=submit]:hover {
  background-color: #5A7F71;
}
button{
background-color: #5A7F71;
}



/* Style for when select is focused */
.inputData:focus {
  outline: none;
  border-color: #007bff; /* Change color as needed */
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Change shadow color as needed */
}

/* Style for when select is hovered */
.inputData:hover {
  border-color: #999;
}


form{
  width:65vw;
	border:0.5px solid grey;
  padding:1rem 2rem;
  border-radius:10px
}
.twoColumnrow1{
	display:flex;
  gap:2rem;
}
.fileColumn{
  width:30vw;
  display:flex;
  gap:3rem;
  align-content:center;
  flex-wrap:wrap;
  font-size: 1.7rem;
  font-weight: 700;
}
.file{
  width:5rem;
  display: flex;
  align-content: center;
  flex-wrap: wrap;
}

.submit_button{
	display:flex;
  justify-content:center;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>add_questions_integ</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Add Questions Integ</name>
        <option_schema>[{"displayValue":"Table","name":"questions_table","section":"Data","label":"Questions Table","type":"reference","value":"sys_db_object","ed":{"reference":"sys_db_object"}},{"displayValue":"Table","name":"response_type_table","section":"Data","label":"Response Type Table","type":"reference","value":"sys_db_object","ed":{"reference":"sys_db_object"}},{"displayValue":"Table","name":"product_variant_table","section":"Data","label":"Product Variant Table","type":"reference","value":"sys_db_object","ed":{"reference":"sys_db_object"}}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	data.table=[];
	data.delete=[]
	data.responseType=[];
	var questions_table,product_table, product_variant_table, response_type_table, insurer_table, illness_category_table, attachment_table;
	data.questions_table = options.questions_table;
	data.product_table=options.product_table;
	data.product_variant_table = options.product_variant_table;
	data.response_type_table = options.response_type_table||'x_rptp_smartinte_0_integration_question_responsetype';
	data.illness_category_table = options.illness_category_table || 'x_rptp_smartinte_0_integration_question_category';
	data.insurer_table = options.insurer_table || 'x_rptp_smartinte_0_integrationinsurer';
	data.attachment_table = options.attachment_table || 'sys_attachment';



	var tables = [
		{ sysid: data.response_type_table, variable: 'response_type_table' },
		{sysid:data.product_table, variable: 'product_table'},
		{ sysid: data.questions_table, variable: 'questions_table' },
		{ sysid: data.product_variant_table, variable: 'product_variant_table' },
		{ sysid: data.illness_category_table, variable: 'illness_category_table' },
		{ sysid: data.insurer_table, variable: 'insurer_table' },
		{ sysid: data.attachment_table, variable: 'attachment_table' },
	];

	tables.forEach(function(tableInfo, index) {
		var gr = new GlideRecord('sys_db_object');
		gr.addQuery('sys_id', tableInfo.sysid);
		gr.query();

		if (gr.next()) {
			switch (tableInfo.variable) {
				case 'questions_table':
					data.questions_table = gr.name;
					break;
				case 'product_variant_table':
					data.product_variant_table = gr.name;
					break;
				case 'response_type_table':
					data.response_type_table = gr.name;
					break;
				case 'illness_category_table':
					data.illness_category_table = gr.name;
					break;
				case 'insurer_table':
					data.insurer_table = gr.name;
					break;
					case 'product_table':
					data.product_table = gr.name;
					break;
				case 'attachment_table':
					data.attachment_table = gr.name;
					break;
			}
		}
	});
	
	//gs.addErrorMessage(data.response_type_table)
	var responseGr=new GlideRecord(data.response_type_table);
	responseGr.addQuery('isactive',true);
	responseGr.query();
	while(responseGr.next()){
		data.responseType.push({
			"sys_id":responseGr.sys_id+"",
			"name":responseGr.type+""
		}
													);
	}
	//gs.addErrorMessage(JSON.stringify(data.responseType))


	var gr= new GlideRecord(data.questions_table);
	//gr.addQuery('isactive',true);
	if(input && input.insurer)
		gr.addQuery('insurer',input.insurer.sys_id)
	if(input && input.product)
	gr.addQuery('product',input.product.sys_id)
	if(input && input.prodVariant)
		gr.addQuery('product_variant',input.prodVariant.sys_id)
	if(input && input.illCat)
		gr.addQuery('question_category',input.illCat.sys_id)
	gr.query(); // Query all records from the table

	// Iterate over the GlideRecord result
	while (gr.next()) {
		// Extract fields from the GlideRecord
		var fieldValue1 = gr.getDisplayValue('question'); // Replace 'field1' with the actual field name
		var fieldValue2 = gr.getDisplayValue('question_responsetypeid'); // Replace 'field2' with the actual field name
		var hasSubQuestions = gr.getValue('has_sub_questions') || false;
		var subQuestions = []; 
		var isSubQuestion = false;
		if(hasSubQuestions) {
			var questionSys_Id = gr.getValue('sys_id');
			isSubQuestion = !gs.nil(questionSys_Id);
			if(isSubQuestion) {
				subQuestions = getRecords(questionSys_Id);
			}
		}       

		// Create an object for the question
		var obj = {
			field1: fieldValue1,
			field2: gr.getValue('sys_id'),
		};

		// If it's a subquestion, add subquestions to the object
		if(isSubQuestion) {
			obj.subQ = subQuestions;
		}

		var parentQuestionId = gr.getValue('parent_question');
		if(gs.nil(parentQuestionId)) {
			// Push the object into the array
			data.table.push(obj);
		}
		//here
		/*
	if(fieldValue2=="Dropdown"){
				option=optionValue(questionSys_Id)
				obj.option=option
			}
			//here*/
	}

//here
	/*
		function optionValue(sys){
		var opt=[]

		var optGr = new GlideRecord("x_rptp_smartinte_0_integration_question_response_options" );
		optGr.addQuery("question",sys);
		optGr.query();
			//gs.addInfoMessage(optGr);
		while (optGr.next()) {
			opt.push({ label: optGr.options + "", value: optGr.options + "" });
			//gs.addErrorMessage(JSON.stringify(opt))
		}
		return opt;
	}
//here
*/
	function getRecords(sysId) {
		var gr2= new GlideRecord(data.questions_table);
		gr2.addQuery('isactive',true);

		gr2.addQuery('parent_question', sysId);


		gr2.query();
		var parentobj = [];

		while(gr2.next()){
			var sbQue = gr2.getDisplayValue('question');
			var sbQuesRes = gr2.getDisplayValue('question_responsetypeid');
			var hasSubQuestions = gr.getValue('has_sub_questions') || false;
			var subQuestions = []; 
			var isSubQuestion = false;
			if(hasSubQuestions) {
				var questionSys_Id = gr2.getValue('sys_id');
				isSubQuestion = !gs.nil(questionSys_Id);
				if(isSubQuestion) {
					subQuestions = getRecords(questionSys_Id);
				}
			}

			obj = {
				field1: sbQue,
				field2: gr2.getValue('sys_id'),
		//here			
				sys_id: gr2.getValue('sys_id'),
				res:gr2.getValue('question_responsetypeid'),
				span:""//here
			}


			// If it's a subquestion, add subquestions to the object
			if(isSubQuestion) {
				obj.subQ = subQuestions;
			}
			parentobj.push(obj);
		}
		return parentobj;
	}

	var illnessQuestionGr="";

	//for creating new sub question the question

	if(input && input.action=="create"){
		//	gs.addErrorMessage(JSON.stringify(input.value))
		var prdId="";
		var prodVariant="";
		//gs.addErrorMessage(input.value.product.sys_id)
		var pgr=new GlideRecord(data.product_variant_table);
		pgr.addQuery('sys_id',input.value.product.sys_id+"");
		pgr.query();
		if(pgr.next()){
			prdId=pgr.product +"";
			prodVariant=pgr.name+"";
			//gs.addErrorMessage(prodVariant)
			//gs.addErrorMessage(prdId)
		}
		illnessQuestionGr= new GlideRecord(data.questions_table);


		illnessQuestionGr.newRecord()
		illnessQuestionGr.product_variant	=input.value.product.sys_id+"";
		
		illnessQuestionGr.insurer	=input.value.insurer.sys_id+"";
		illnessQuestionGr.product=prdId+"";
		//illnessQuestionGr.product_variant=prodVariant+"";
		//gs.addErrorMessage(prodVariant);
		//gs.addErrorMessage(prdId);
		illnessQuestionGr.question_category	=input.value.illCat.name+"";
		//gs.addErrorMessage(illnessQuestionGr.question_category);
		illnessQuestionGr.question=input.value.question;
		illnessQuestionGr.order=input.value.order;
		illnessQuestionGr.question_responsetypeid=input.value.resType.sys_id+"";
		//	if(input.value.refQ)
		//	gs.addErrorMessage(JSON.parse(input.value.refQ).field2)
		illnessQuestionGr.parent_question=input.value.refQ.field2;
		illnessQuestionGr.isactive	=input.value.active;
		//	illnessQuestionGr.question	=input.value.name+"";
		illnessQuestionGr.has_sub_questions=input.value.hasSub;
		illnessQuestionGr.question_category	=input.value.illCat.sys_id+"";
	//	illnessQuestionGr.questiontype	="product";

		illnessQuestionGr.insert();

	}

 
	//for editing the question
	if(input && input.edit=="true"){
		//	gs.addErrorMessage(JSON.stringify(input.value.curQ.field2))
		illnessQuestionGr= new GlideRecord(questions_table);
		gr.addQuery('isactive',true);
		illnessQuestionGr.addQuery("sys_id",input.value.curQ.field2)
		illnessQuestionGr.query()
		while(illnessQuestionGr.next()){
			if(input.value.product.sys_id !="")
				illnessQuestionGr.product_variant	=input.value.product.sys_id+"";
			if(input.value.insurer.sys_id !="")
				illnessQuestionGr.insurer	=input.value.insurer.sys_id+"";
			//	illnessQuestionGr.insuranceillnesscategoryid	=input.value.illnessCat.sys_id+"";
			if(input.value.question !="")
				illnessQuestionGr.question=input.value.question;
			if(input.value.order !="")
				illnessQuestionGr.order=input.value.order;
			if(input.value.resType.sys_id !="")
				illnessQuestionGr.question_responsetypeid=input.value.resType.sys_id+"";
			if(input.value.illCat.sys_id !="")
				illnessQuestionGr.question_category	=input.value.illCat.sys_id+"";

			if(input.value.active !="")	
				illnessQuestionGr.isactive	=input.value.active;
			//	illnessQuestionGr.question	=input.value.name+"";
			if(input.value.hasSub !="")
				illnessQuestionGr.has_sub_questions=input.value.hasSub;
			illnessQuestionGr.update();
		}
	}

//here
	
 data.product=[];
	data.variant=[];
	data.insurer=[];
	data.illnessCat=[];
	//	data.illnessQuestionConfig=[{"name":"none",sys_id:""}]
	//data.responseType=[]

	var variantGr=new GlideRecord(data.product_variant_table);
	var product=new GlideRecord(data.product_table);
	
	
	if(input && input.insurer){
		
			product.addQuery('insurer',input.insurer.sys_id);
	product.query();
	while(product.next()){

		//	gs.addErrorMessage(JSON.stringify(obj))
		data.product.push({
			"sys_id":product.sys_id+"",
			"name":product.name+""
		}
										 );
		
	}
	//	gs.addErrorMessage(JSON.stringify(data.product));
		
		
		

	}
if(input && input.product){
variantGr.addQuery('product',input.product.sys_id);
	variantGr.query();
	while(variantGr.next()){

		//	gs.addErrorMessage(JSON.stringify(obj))
		data.variant.push({
			"sys_id":variantGr.sys_id+"",
			"name":variantGr.name+""
		}
										 );
	}
}

	//	gs.addErrorMessage(JSON.stringify(data.variant))

	//gs.addErrorMessage(data.insurer_table)
	var insurerGr=new GlideRecord(data.insurer_table);

	insurerGr.query();
	while(insurerGr.next()){
		data.insurer.push({
			"sys_id":insurerGr.sys_id+"",
			"name":insurerGr.name+""
		}
										 );
	}



	var illnessGr=new GlideRecord(data.illness_category_table);
	illnessGr.query();
	while(illnessGr.next()){
		data.illnessCat.push({
			"sys_id":illnessGr.sys_id+"",
			"name":illnessGr.name+""
		}
												);
		
	}



	//for viewing the details about the question
	data.details=[];


	if(input && input.action=="getDetails"){
		illnessQuestionGr= new GlideRecord(questions_table);
		illnessQuestionGr.addQuery('sys_id',input.value.field2+"");
		illnessQuestionGr.query();
		while(illnessQuestionGr.next()){
			//	gs.addErrorMessage("hii")
			insurerGr=new GlideRecord(insurer_table);
			insurerGr.addQuery('sys_id',illnessQuestionGr.insurerid+"")
			insurerGr.query();
			var insureDisplay="";
			if(insurerGr.next()){
				insureDisplay=	insurerGr.name+"";
			}
			//here
			var productDisplay="";
			product=new GlideRecord(product_table);
			product.addQuery('sys_id',illnessQuestionGr.productid+"");
			product.query();
			if(product.next()){
			productDisplay=product.name+"";
			}
			
			
			var prodDisplay="";
			variantGr=new GlideRecord(product_variant_table);
			variantGr.addQuery('sys_id',illnessQuestionGr.productvariantid+"");
			variantGr.query();
			if(variantGr.next()){
				prodDisplay=variantGr.name+"";
			}
			var illCatDisplay="";
			illnessGr=new GlideRecord(illness_category_table);
			illnessGr.addQuery('sys_id',illnessQuestionGr.insuranceillnesscategoryid+"");
			illnessGr.query();
			if(illnessGr.next()){
				illCatDisplay=illnessGr.name+"";	
			}
			

			var refQuestion="";
			var parentQ = new GlideRecord(questions_table);
			parentQ.addQuery('sys_id',illnessQuestionGr.insuranceillnessconfiguration_questionsid+"");
			parentQ.query();
			if(parentQ.next()){
				refQuestion=parentQ.question+"";
			}

			var resDisplay="";
			responseGr=new GlideRecord(response_type_table);
			responseGr.addQuery('sys_id',illnessQuestionGr.insuranceillnessquestion_responsetypeid+"");
			responseGr.query();
			if(responseGr.next()){
				resDisplay=responseGr.type+"";
			}
			data.details={
				Insurer:insureDisplay,
				ProductName:productDisplay, //here
				Product:prodDisplay,
				Illness:illCatDisplay,
				ParentQuestion:refQuestion,
				Question:illnessQuestionGr.question+"",
				Response:resDisplay,
				Order:illnessQuestionGr.order+"",
				subQuestion:illnessQuestionGr.hassubquestions+"",
				active:illnessQuestionGr.isactive+""||false
			}
		}
	gs.addErrorMessage(JSON.stringify(data.details))


	}


	//for deleting
	if(input && input.action=="delete"){
		var  deleteGr= new GlideRecord(data.questions_table);
		//	gs.addErrorMessage(input.value.field2)
		deleteGr.addQuery('sys_id',input.value.field2+"");
		deleteGr.query()
		if(deleteGr.next()){
			var dhasSubQuestions = deleteGr.getValue('has_sub_questions') || false;
			var dsubQuestions = []; 
			var disSubQuestion = false;
			if(dhasSubQuestions) {
				var dquestionSys_Id = deleteGr.getValue('sys_id');
				disSubQuestion = !gs.nil(input.value.field2+"");
				if(disSubQuestion) {
					dsubQuestions = getRecords(input.value.field2+"");
					//gs.addErrorMessage(dsubQuestions)
				}
			}       

			// Create an object for the question
			var dobj = {
				field1:deleteGr.getValue('question')+"",
				field2: deleteGr.getValue('sys_id')+"",

			};

			// If it's a subquestion, add subquestions to the object
			if(disSubQuestion) {
				dobj.subQ = dsubQuestions;
			}

			var dparentQuestionId = deleteGr.getValue('parent_question');

			// Push the object into the array
			data.delete.push(dobj);
		}
		//	gs.addErrorMessage(JSON.stringify(data.delete))
		deleteRecord((data.delete[0]));
		deleteGr.deleteRecord();


	}
	
	function deleteRecord(o){
		//	gs.addInfoMessage(JSON.stringify(o))

		if(o.subQ.length<1){
			return;
		}
		else {
			o.subQ.forEach(function(ele){
				deleteRecord((ele));
				//gs.addErrorMessage(ele);
					//gs.addErrorMessage(JSON.stringify(ele));

				var del=new GlideRecord(data.questions_table);
				del.addQuery('sys_id',ele.field2+"");
				del.query();
				if(del.next()){
					//gs.addErrorMessage(ele.field2+""+ele.field1);
					del.deleteRecord();
				}
			})
		}
	}

/*	
	function deleteRecord(o) {
  if (!o.subQ || !Array.isArray(o.subQ) || o.subQ.length < 1) {
    return;
  } else {
    o.subQ.forEach(function(ele) {
      deleteRecord(ele); // Recursive call

      var del = new GlideRecord(data.questions_table);
      del.addQuery('sys_id', ele.field2 + "");
      del.query();
      if (del.next()) {
        del.deleteRecord();
      }

      // Debugging information
      gs.addErrorMessage(JSON.stringify(ele));
    });
  }
}
*/
	data.ret="";
	if(input && input.action=="fileAtt"){
		var gr=new GlideRecord(questions_table);
		gr.newRecord()
		data.ret=gr.insert();
		return data.ret;
	}





	if (input && input.action == "add") {
		var sysidA = "";
		//gs.addErrorMessage(input.value);

		// Query for the attachment record
		var attGr = new GlideRecord(data.attachment_table);
		attGr.addQuery('table_sys_id', 	input.value);
		attGr.query();
		// gs.addErrorMessage(attGr.getRowCount());

		if (attGr.next()) {
			//gs.addInfoMessage("Attachment found");
			sysidA = attGr.getValue('sys_id');  
			//	gs.addErrorMessage("Attachment_sysId"+sysidA)
		}
		//gs.addErrorMessage(sysidA);
		// Retrieve the attachment content stream
		// iterate over each row in the excel sheet
		var attachment = new GlideSysAttachment();
		var attachmentStream = attachment.getContentStream(sysidA);
		var parser = new sn_impex.GlideExcelParser();
		parser.parse(attachmentStream);


		var recordId=[]//for dtoring the id from excel

		var resValue=[];// fro storing the reponse type and its sys id


		var resType=new GlideRecord(data.response_type_table);
		resType.query()

		while(resType.next()){
			resValue.push({name:resType.type+"",sys_id:resType.sys_id+""})
		}
		var parQ=[]  // for list of parent questions
		var subQ=[]	//for list of all subquestion
		while (parser.next()) {
			// do something on each row	qGr.newRecord()
			//gs.addErrorMessage("in parser")
			var row = parser.getRow();
			//gs.addErrorMessage(JSON.stringify(row))
			if(row.ParentQuestionId==null){
				parQ.push(row);
			}else{
				subQ.push(row);
			}
		}

		parser.close(); // close the stream and release the document


		//gs.addErrorMessage(JSON.stringify(parQ));
		//	gs.addErrorMessage(JSON.stringify());
		//gs.addErrorMessage(JSON.stringify(subQ));
		//gs.addErrorMessage((JSON.parse(input.details.prod).sys_id))




		parQ.forEach(function(record){

			var prdId="";
			//gs.addErrorMessage(input.value.product.sys_id)
			var pgr=new GlideRecord(data.product_variant_table);
			pgr.addQuery('sys_id',JSON.parse(input.details.prod).sys_id);
			pgr.query();
			if(pgr.next()){
				prdId=pgr.product +"";
				//gs.addErrorMessage(prdId)
			}


			var qGr=new GlideRecord(data.questions_table);
			qGr.newRecord();
			qGr.productvariantid=JSON.parse(input.details.prod).sys_id;
			qGr.insurerid=JSON.parse(input.details.insurer).sys_id;
				//qGr.productid=JSON.parse(input.details.product).sys_id;
			
			qGr.insuranceillnesscategoryid=JSON.parse(input.details.illCat).sys_id;
			resValue.forEach(function(type){
				if(type.name==record.Type){
					qGr.insuranceillnessquestion_responsetypeid=type.sys_id;
				}
			})
			qGr.question=record.Question;
			qGr.order=record.Order;
			qGr.isactive=record.Active;
			qGr.hassubquestions=record.HasSubQuestion;
			qGr.product=prdId+"";
			qGr.questiontype="product";
			var id=qGr.insert();
			recordId.push({id:record.ID,sys_id:id});
		});

		//gs.addErrorMessage((recordId[0].sys_id))
		//gs.addErrorMessage((resValue[0].sys_id))

		subQ.forEach(function(record){

			var prdId="";
			//gs.addErrorMessage(input.value.product.sys_id)
			var pgr=new GlideRecord(product_variant_table);
			pgr.addQuery('sys_id',JSON.parse(input.details.prod).sys_id);
			pgr.query();
			if(pgr.next()){
				prdId=pgr.product +"";
				//gs.addErrorMessage(prdId)
			}




			var qGr=new GlideRecord(data.questions_table);

			qGr.newRecord();
			qGr.productvariantid=JSON.parse(input.details.prod).sys_id;
			qGr.insurerid=JSON.parse(input.details.insurer).sys_id;
			qGr.insuranceillnesscategoryid=JSON.parse(input.details.illCat).sys_id;
			resValue.forEach(function(type){
				if(type.name==record.Type){
					qGr.insuranceillnessquestion_responsetypeid=type.sys_id;
				}
			});

			qGr.question=record.Question;
			qGr.order=record.Order;
			qGr.isactive=record.Active;
			qGr.hassubquestions=record.HasSubQuestion;

			recordId.forEach(function(parent){
				if(parent.id==record.ParentQuestionId){
					//	gs.addErrorMessage(parent.sys_id);
					qGr.insuranceillnessconfiguration_questionsid=parent.sys_id;
				}
			});
			qGr.questiontype="product";
			qGr.product=prdId+"";
			var id=qGr.insert();
			recordId.push({id:record.ID,sys_id:id});
		});

		//	gs.addErrorMessage("hii")
		var delgr=new GlideRecord(data.questions_table);

		if(delgr.get(input.value)){
			//	gs.addErrorMessage("delete");
			delgr.deleteRecord();
		}


	}

})();







]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harshitha</sys_created_by>
        <sys_created_on>2024-07-08 11:38:40</sys_created_on>
        <sys_id>d2f05709ffd3461019a8ffda7c4fd9d2</sys_id>
        <sys_mod_count>234</sys_mod_count>
        <sys_name>Add Questions Integ</sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sp_widget_d2f05709ffd3461019a8ffda7c4fd9d2</sys_update_name>
        <sys_updated_by>harshitha</sys_updated_by>
        <sys_updated_on>2024-07-30 05:19:29</sys_updated_on>
        <template><![CDATA[<div><button ng-click="c.import()" style="float:right">Import Questions</button>
  <button ng-click="c.createNew()" style="float:right">Add New Question</button>
  <div class="backk">
<button  id="backBtn" class="btn btn-primary goBack" ng-click="goBack()">
<i class="fa fa-arrow-circle-left"></i>
</button>
</div>
 
  <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="btn-close" ng-click="c.closeModal()" aria-label="Close" style="float:right">x</button>
        
        <h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
      </div>
      <div class="modal-body">
        
        <div class="inputs">
    <label for="insurer">Insurer: <span class="required">*</span></label>
    <select id="insurer" ng-model="c.insurer" required class="dropdown" ng-change="c.getVariants(c.insurer)">
      <option ng-repeat="key in c.data.insurer" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
          
    <label for="product">Product: <span class="required">*</span></label>
  <select id="product" ng-model="c.product" required class="dropdown" ng-change="c.getProducts(c.product)">
    <option ng-repeat="key in c.data.product" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
  </select>
  <br />
    <label for="prodVariant">Product Variant: <span class="required">*</span></label>
    <select id="prodVariant" ng-model="c.prodvariant" required class="dropdown"  ng-change="c.getprod(c.prodvariant,c.insurer)">
      <option ng-repeat="key in c.data.variant" ng-attr-id="option_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
    <label for="illness_cat">Question Category: <span class="required">*</span></label>
    <select id="illness_cat" ng-model="c.illnessCategory" required class="dropdown"  ng-change="c.getQuestions(c.illnessCategory,c.prodvariant,c.insurer)">
      <option ng-repeat="key in data.illnessCat" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
  </div>
        
        	<input ng-show="true" type="file" accept=".xls,.xlsx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel" ng-file-select="attachFiles({files: $files})" ng-click="c.uploadFlie($event)">
<a href="{{url}}" download="file" class="btn btn-secondary">Download Template</a>
      </div>
      <div class="modal-footer">
         <button type="button" class="btn btn-primary" ng-click="c.upload($event);c.uploadFlie($event)">Import</button>
      </div>
      <div class="light-grey">
                <div id="myBar" class="green" style="height:10px;width:0"></div>												<!--for displaying the loading bar on clicking on fetch button-->
              </div> 
    </div>
  </div>
</div>
  
  
  <div class="modal fade" id="viewModal" tabindex="-1" role="dialog" aria-labelledby="viewModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewModalLabel">View Question</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div>
          
          
          <label class="info-label" for="insurer">Insurer: </label>
          <input id="insurer" type="text" name="insurer" ng-model="c.data.details.Insurer" disabled />
          
          

          <label class="info-label" for="prodVar">Product Variant: </label>
          <input id="prodVar" type="text" name="prodVar" ng-model="c.data.details.Product" disabled />

          <label class="info-label" for="illCat">Question Category: </label>
          <input id="illCat" type="text" name="illCat" ng-model="c.data.details.Illness" disabled />
          
           <label class="info-label" for="parentQuestion" ng-if="c.data.details.ParentQuestion!=''" >Parent Question: </label>
          <input id="parentQuestion" type="text" name="parentQuestion" ng-if="c.data.details.ParentQuestion!=''" ng-model="c.data.details.ParentQuestion" disabled />

          <label class="info-label">Question: </label>
          <input id="question" type="text" name="question" ng-model="c.data.details.Question" disabled />

          <label class="info-label">Response: </label>
          <input id="response" type="text" name="response" ng-model="c.data.details.Response" disabled />

          <label class="info-label">Order: </label>
          <input id="order" type="text" name="order" ng-model="c.data.details.Order" disabled />

          <label class="info-label">Has Sub-Question: </label>
          <input id="hasSubQuestion" type="text" name="hasSubQuestion" ng-model="c.data.details.subQuestion" disabled />

          <label class="info-label">Is Active: </label>
          <input id="isActive" type="text" name="isActive" ng-model="c.data.details.active" disabled />

        </div>
      </div>
    </div>
  </div>
</div>
  
  
  
  
  <div class="inputs">
    <label for="insurer">Insurer: <span class="required">*</span></label>
    <select id="insurer" ng-model="c.insurer" required class="dropdown" ng-change="c.getVariants(c.insurer)">
      <option ng-repeat="key in c.data.insurer" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
   
    <label for="product">Product: <span class="required">*</span></label>
  <select id="product" ng-model="c.product" required class="dropdown" ng-change="c.getProducts(c.product,c.insurer)">
    <option ng-repeat="key in c.data.product" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
  </select>
  <br />
    <label for="prodVariant">Product Variant: <span class="required">*</span></label>
    <select id="prodVariant" ng-model="c.prodvariant" required class="dropdown"  ng-change="c.getprod(c.prodvariant,c.insurer)">
      <option ng-repeat="key in c.data.variant" ng-attr-id="option_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
    <label for="illness_cat">Question Category: <span class="required">*</span></label>
    <select id="illness_cat" ng-model="c.illnessCategory" required class="dropdown"  ng-change="c.getQuestions(c.illnessCategory,c.product,c.insurer)"><!-- if productvariant filtering is required then add c.productVariant-->
      <option ng-repeat="key in data.illnessCat" ng-attr-id="optn_{{$index}}" value="{{key}}">{{key.name}}</option>
    </select>
    <br />
  </div>


<div ng-app="MyApp" ng-controller="MyCtrl" ng-if="c.insurer"  >
  <store class="question-list" menu="menuItems"></store>
 <!--   <storeInteg class="question-list" menu="menuItems"></storeInteg>-->
</div>
  
  
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Sub Question</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" ng-click="c.closeModal()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <div>
            <label class="info-label" for="insurer">Insurer:</label>
            <input id="insurer" type="text" name="insurer" ng-model="c.insurerId.name" disabled />
            
          <!--   <label class="info-label" for="product">Product: </label>
          <input id="product" type="text" name="product" ng-model="c.product.name" disabled />-->

            <label class="info-label" for="product_variant">Product Variant:</label>
            <input id="product_variant" type="text" name="product_variant" ng-model="c.prodVar.name" disabled />

            <label class="info-label" for="illness_cat">Question Category:</label>
            <input id="illness_cat" type="text" name="illness_cat" ng-model="c.illCat.name" disabled />

            <label class="info-label" for="question">Parent Question:</label>
            <input id="question" type="text" name="question" ng-model="clickedQuestion.field1" disabled />
          </div>

          <label for="Question">Question: <span class="required">*</span></label>
          <input id="Question" type="text" name="Question" ng-model="c.subQuestion" required />
          <span style="color: {{errorInValue ? 'red' : 'transparent'}};" >{{errorInValue}}</span>
          <br />  
          <label for="response_type">Response Type: <span class="required"></span></label>
          <select id="response_type" ng-model="c.subResponseType" required class="dropdown">
            <option ng-repeat="key in data.responseType" value="{{key}}">{{key.name}}</option>
          </select>
          <br />
          <label for="order">Order: </label>
          <input id="order" type="text" name="order" ng-model="c.suborder" required ng-pattern="/^[0-9]+$/"/>
          <span style="color: {{errorInValue ? 'red' : 'transparent'}};" >{{errorInValue}}</span>

          <br />  
          <label for="hasSubQuestion" class="subCheckBox" >Has Sub-Question: <input type="checkbox" class ="displayCheck" name="hasSubQuestion" ng-model="c.hassubquestion" /></label>
         
          <label for="isActive" class="subCheckBox" >Is Active:<input type="checkbox" class ="displayCheck" name="isActive" ng-model="c.isActiveSub" /></label>
          
          <br />
          <input id="subQuestion" class="subQuestion" ng-if="c.subQuestion" type="submit" value="Add Sub-Question" ng-click="c.addSub()" data-dismiss="modal"/>
          <br/>
        </div>
      </div>
    </div>
  </div>
</div>
  
  
  
  <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Question</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
           <label class="info-label" for="insurer">Insurer: </label>
            <input id="insurer" type="text" name="insurer" ng-model="c.insurerId.name" disabled />

            <label class="info-label" for="product_variant">Product Variant: </label>
            <input id="product_variant" type="text" name="product_variant" ng-model="c.prodVar.name" disabled />

            <label class="info-label" for="illness_cat">Question Category: </label>
            <input id="illness_cat" type="text" name="illness_cat" ng-model="c.illCat.name" disabled />

            <label for="Question">Question: <span class="required">*</span></label>
            <input id="Question" type="text" name="Question" ng-model="c.editedQ" required />
            <span style="color: {{errorInValue ? 'red' : 'transparent'}};" >{{errorInValue}}</span>
            <br />  
            <label for="response_type">Response Type: <span class="required"></span></label>
            <select id="response_type" ng-model="c.editedResType" required class="dropdown">
              <option  ng-repeat="key in data.responseType"  ng-attr-id="optn_{{$index}}"  value="{{key}}" >{{key.name}}</option>
            </select>
            <br />
            <label for="order">Order: </label>
            <input id="order" type="text" name="order" ng-model="c.editedOrder" required  ng-pattern="/^[0-9]+$/"/>
            <span style="color: {{errorInValue ? 'red' : 'transparent'}};" >{{errorInValue}}</span>

            <br />  
            <label for="hasSubQuestion" class="subCheckBox" >Has Sub-Question: <input type="checkbox" class ="displayCheck" name="hasSubQuestion" ng-model="c.editedHasSub" /></label>
           
            <label for="isActive" class="subCheckBox" >Is Active:<input type="checkbox" class ="displayCheck" name="isActive" ng-model="c.editedisActiveSub" /></label>
            
            <br />
            <input  id="editedSubQ" class="subCheckBox" type="submit" ng-if="c.editedQ" value="Submit" ng-click="c.edit()" data-dismiss="modal"/>
            <br/>
          </div>
            </div>
        </div>
    </div>
  
  
  
  
</div>]]></template>
    </sp_widget>
</record_update>
