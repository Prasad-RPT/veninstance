<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_rptp_smartinte_0.table_data_to_json_data</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>table_data_to_json_data</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var table_data_to_json_data = Class.create();
table_data_to_json_data.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
json_payload:function(){
	var jsonObject = {};
// Create a GlideAggregate query to group by the common field (ParentPropertyKey)
var ga = new GlideAggregate('x_rptp_insureme_sourcefieldsmapper');
ga.groupBy('parentpropertykey');   // Group by the common field (ParentPropertyKey)
ga.query();
 
while (ga.next()) {
    // Get the display value of the ParentPropertyKey
    var Json_data_container= ga.getValue('parentpropertykey');
   
    // Initialize a new JSON block with the category as the name
    jsonObject[Json_data_container] = {};
 
    // Query the table for records with the current ParentPropertyKey
    var gr = new GlideRecord('x_rptp_insureme_sourcefieldsmapper');
    gr.addQuery('parentpropertykey', ga.getValue('parentpropertykey'));  // Use getValue to get the field value from GlideAggregate
    gr.query();
 
    // Iterate through the records
    while (gr.next()) {
       // gs.info(gr.getValue('sourcefield').toString());
        var apiMaster=new GlideRecord('x_rptp_insureme_apifieldmapper');
      //  gs.info(gr.getValue('sourcefield').toString());
        apiMaster.addQuery('sourcefieldmap',gr.getValue('sys_id')+"");
        apiMaster.query();
        // Add key-value pairs to the JSON block
        if(apiMaster.next()){
           // gs.info("testing")
        jsonObject[Json_data_container][gr.getValue('targetpropertyname').toString()] = gr.getDisplayValue('sourcefield').toString();
        }
    }
}
 
// Convert the JavaScript object to a JSON string
var jsonString = JSON.stringify(jsonObject);
 
// Print or use the JSON string
return jsonString;
 
},
    type: 'table_data_to_json_data'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>chandan.parmar</sys_created_by>
        <sys_created_on>2024-04-29 06:57:49</sys_created_on>
        <sys_id>26efe5ee47fd8690e9ddbf66706d4333</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>table_data_to_json_data</sys_name>
        <sys_package display_value="SmartIntegration" source="x_rptp_smartinte_0">eeb170fcff218a1019a8ffda7c4fd91f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SmartIntegration">eeb170fcff218a1019a8ffda7c4fd91f</sys_scope>
        <sys_update_name>sys_script_include_26efe5ee47fd8690e9ddbf66706d4333</sys_update_name>
        <sys_updated_by>chandan.parmar</sys_updated_by>
        <sys_updated_on>2024-04-29 07:04:58</sys_updated_on>
    </sys_script_include>
</record_update>
